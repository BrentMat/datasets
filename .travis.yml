dist: xenial

language: go

go:
  - 1.12.x
  - 1.13.x
cache:
  - $HOME/go
env:
  - GO111MODULE=on GOBIN=$HOME

before_install:
  - go get -v -u golang.org/x/lint/golint

script:
  - find -name go.mod -execdir go vet ./... \;
  - lintwarns=$($HOME/golint ./... | grep src-d/datasets || true)
  - if [ ! -z $lintwarns ]; then echo $lintwarns; false; fi
  - make test-coverage

after_success:
  - bash <(curl -s https://codecov.io/bash)

jobs:
  include:
    - stage: deploy
      os: osx
      go: 1.13.x
      after_success:
        - gzip -S .darwin_amd64.gz pga-create
        - gzip -S .darwin_amd64.gz pga
      before_install: skip
      install:
        - cd PublicGitArchive/pga-create && go install && cd ../..
        - cd PublicGitArchive/pga && go install && cd ../..
      script: skip
      deploy:
        provider: releases
        api_key:
          secure: $GITHUB_TOKEN
        file:
          - "pga-create.darwin_amd64.gz"
          - "pga.darwin_amd64.gz"
        skip_cleanup: true
        on:
          tags: true
    - stage: deploy
      os: linux
      go: 1.13.x
      before_install: skip
      install:
        - cd PublicGitArchive/pga-create && go install && cd ../..
        - cd PublicGitArchive/pga && go install && cd ../..
      script: skip
      after_success:
        - gzip -S .linux_amd64.gz pga-create
        - gzip -S .linux_amd64.gz pga
      deploy:
        provider: releases
        api_key:
          secure: $GITHUB_TOKEN
        file:
          - "pga-create.linux_amd64.gz"
          - "pga.linux_amd64.gz"
        skip_cleanup: true
        on:
          tags: true
      after_deploy:
        - cd PublicGitArchive/pga-create
        - make docker-push-latest-release

notifications:
  email: false

